name: Pre-release on CI Success

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

permissions:
  contents: write

jobs:
  create-prerelease:
    runs-on: ubuntu-latest
    # Only run if CI passes and on main branch
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    steps:
      # Note: Checking out workflow_run.head_sha is safe here because:
      # 1. This only runs on main branch (checked in job if condition)
      # 2. This only runs after CI passes successfully
      # 3. We use the exact SHA that passed CI, not a branch ref
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      # Skip if this is a release commit from release-please
      - name: Check if release commit
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q "^chore(main): release"; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "This is a release commit, skipping pre-release creation"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "This is not a release commit, proceeding with pre-release"
          fi

      - name: Set up Go
        if: steps.check_release.outputs.is_release != 'true'
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Set up Node.js
        if: steps.check_release.outputs.is_release != 'true'
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Cache Node modules
        if: steps.check_release.outputs.is_release != 'true'
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        if: steps.check_release.outputs.is_release != 'true'
        working-directory: ./frontend
        run: npm ci

      - name: Generate semantic version tag
        if: steps.check_release.outputs.is_release != 'true'
        id: tag
        env:
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          # Get the current version from release-please manifest
          BASE_VERSION=$(cat .release-please-manifest.json | grep -oP '"\.":\s*"\K[^"]+')
          
          # Extract SHA and generate timestamp
          SHA=$(echo "$HEAD_SHA" | cut -c1-7)
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          
          # Parse version components
          MAJOR=$(echo "$BASE_VERSION" | cut -d. -f1)
          MINOR=$(echo "$BASE_VERSION" | cut -d. -f2)
          PATCH=$(echo "$BASE_VERSION" | cut -d. -f3)
          
          # Increment patch version for pre-release
          NEXT_PATCH=$((PATCH + 1))
          
          # Create semantic version pre-release tag: v0.6.1-pre.20251026171047.e961141
          TAG="v${MAJOR}.${MINOR}.${NEXT_PATCH}-pre.${TIMESTAMP}.${SHA}"
          
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "sha=${SHA}" >> $GITHUB_OUTPUT
          echo "Generated pre-release tag: ${TAG}"

      - name: Create and push tag for GoReleaser
        if: steps.check_release.outputs.is_release != 'true'
        env:
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Automated pre-release $TAG"
          git push origin "$TAG"

      - name: Run GoReleaser to build and create pre-release
        if: steps.check_release.outputs.is_release != 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
